{"version":3,"sources":["components/Box/Box.tsx","components/Grid/Grid.tsx","containers/Home/Home.tsx","App.tsx","index.tsx"],"names":["Box","backgroundColor","className","style","memo","getRandomColor","color","i","Math","floor","random","options","validateIndex","randomIndex","row","column","Grid","useState","gridState","setGridState","useEffect","grid","Array","fill","map","rowIndex","col","columnIndex","onClick","previousGridState","newGrid","visitedIndexes","length","index","indexOf","splice","clickHandler","Home","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAMMA,EAAM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,gBACX,OACI,qBAAKC,UAAU,iBAAiBC,MAAO,CAACF,gBAAiBA,MAKlDG,iBAAKJ,GCRdK,G,MAAiB,WAGtB,IAFA,IACIC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACtBD,GAHe,mBAGEE,KAAKC,MAAsB,GAAhBD,KAAKE,WAElC,OAAOJ,IAGFK,EAAU,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,CAAC,GAAG,IAElCC,EAAgB,SAACC,EAAqBC,EAAWC,GACnD,OAAID,EAAID,EAAY,IAAK,GAAMC,EAAID,EAAY,GAAI,IAAOE,EAAOF,EAAY,IAAK,GAAME,EAAOF,EAAY,GAAI,IAiDpGG,EA3CF,WACT,MAAiCC,mBAAqB,IAAtD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEAC,qBAAU,WACN,IAAMC,EAAmBC,MAAM,IAAIC,KAAK,IAAIC,KAAI,kBAAMF,MAAM,IAAIC,KAAK,IAAIC,KAAI,kBAAMnB,UACnFc,EAAaE,KACjB,IAqBA,OACI,qBAAKnB,UAAU,iBAAf,SACKgB,EAAUM,KAAI,SAACV,EAAKW,GAAN,OACP,qBAAKvB,UAAU,gBAAf,SACKY,EAAIU,KAAI,SAACE,EAAIC,GAAL,OACL,qBAAKzB,UAAU,gBAAgB0B,QAAS,kBAxB3C,SAACd,EAAaC,EAAgBc,GAC/C,IAAIC,EAAO,YAAOD,GAClBC,EAAQhB,GAAKC,GAAUV,IAMvB,IAJA,IAAI0B,EAAc,UAAOpB,GAErBE,EAAckB,EAAevB,KAAKC,MAAMD,KAAKE,SAASqB,EAAeC,UAElEpB,EAAcC,EAAYC,EAAIC,IAAQ,CACzC,IAAMkB,EAAQF,EAAeG,QAAQrB,GACjCoB,GAAS,GACTF,EAAeI,OAAOF,EAAO,GAEjCpB,EAAckB,EAAevB,KAAKC,MAAMD,KAAKE,SAASqB,EAAeC,SAEzEF,EAAQhB,EAAID,EAAY,IAAIE,EAAOF,EAAY,IAAMR,IACrDc,EAAaW,GAQqDM,CAAaX,EAASE,EAAYT,IAAhF,SACI,cAAC,EAAD,CAAKjB,gBAAiByB,iBC7CvCW,EARF,WACT,OACI,qBAAKnC,UAAU,OAAf,SACI,cAAC,EAAD,O,MCMGoC,MARf,WACE,OACE,qBAAKpC,UAAU,MAAf,SACE,cAAC,EAAD,OCFNqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.43a54303.chunk.js","sourcesContent":["import React, { memo } from 'react'\n\ninterface Props {\n    backgroundColor: string\n}\n\nconst Box = ({ backgroundColor } : Props) => {\n    return (\n        <div className=\"cell-container\" style={{backgroundColor: backgroundColor}}> \n        </div>\n    )\n}\n\nexport default memo(Box);\n","import React, { useEffect, useState } from 'react';\nimport Box from '../Box/Box';\nimport \"./Grid.scss\";\n\n//Color generator reference: https://stackoverflow.com/a/1484514\nconst getRandomColor = () => {\n\tconst letters = \"0123456789ABCDEF\";\n\tlet color = \"#\";\n\tfor (let i = 0; i < 6; i++) {\n\t\tcolor += letters[Math.floor(Math.random() * 16)];\n\t}\n\treturn color;\n};\n\nconst options = [[0,1],[1,0],[-1,0],[0,-1]];\n\nconst validateIndex = (randomIndex:number[],row:number,column:number) => {\n    if((row+randomIndex[0])>=0 && (row+randomIndex[0])<20 && (column+randomIndex[1])>=0 && (column+randomIndex[1])<10){\n        return true;\n    }\n    return false;\n}\n\nconst Grid = () => {\n    const [gridState,setGridState] = useState<string[][]>([]);\n    \n    useEffect(() => {\n        const grid: string[][] = Array(20).fill(\"\").map(() => Array(10).fill(\"\").map(() => getRandomColor()));\n        setGridState(grid);\n\t}, []);\n    \n    const clickHandler = (row: number, column: number, previousGridState: any) => {\n        var newGrid = [...previousGridState];\n        newGrid[row][column] = getRandomColor();\n\n        var visitedIndexes = [...options];\n\n        var randomIndex = visitedIndexes[Math.floor(Math.random()*visitedIndexes.length)];\n        \n        while(!validateIndex(randomIndex,row,column)){\n            const index = visitedIndexes.indexOf(randomIndex);\n            if (index > -1) {\n                visitedIndexes.splice(index, 1);\n            }\n            randomIndex = visitedIndexes[Math.floor(Math.random()*visitedIndexes.length)];\n        }\n        newGrid[row+randomIndex[0]][column+randomIndex[1]] = getRandomColor();\n        setGridState(newGrid);\n\t};\n\n    return (\n        <div className=\"grid-container\">\n            {gridState.map((row, rowIndex) => (\n                    <div className=\"row-container\">\n                        {row.map((col,columnIndex) => (\n                            <div className=\"box-container\" onClick={() => clickHandler(rowIndex,columnIndex,gridState)}>\n                                <Box backgroundColor={col}/>\n                            </div>\n                        ))}\n                    </div>\n                \n            ))}\n        </div>\n    )\n}\n\nexport default Grid;\n\n","import React from 'react';\nimport Grid from '../../components/Grid/Grid';\n\nconst Home = () => {\n    return (\n        <div className=\"home\">\n            <Grid/>\n        </div>\n    )\n}\n\nexport default Home\n","import React from 'react';\nimport Home from './containers/Home/Home';\nimport './styles/styles.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}